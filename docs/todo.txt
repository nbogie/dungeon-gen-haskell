TODO
* Make a tour of the generation process by having an animation step through the various display modes
* widen corridors to 3 across
* sort edge in fixed direction before making rectilines.  need not go room centre to room centre - rather, centre of room 1 to an intersect point in room 2 if that means a straight horiz or vertical line can be used.
* remove overlapping rooms, or at least those with identical centres, when snapped.  (take the bigger one)?  Graph wants a set of nodes, as does triangulation.
* don't need to preserve velocity between iterations.  apply a force, have it cause movement, then consider everything stuck again.  So we can also get rid of drag, and use higher velocities, once off.
* remove bug where some of the (sufficiently sized) rooms are apprently ignored from the delauney triangulation - traced to delauney triangulation library. 
.
DONE
* use a normal distribution of room sizes, so that small sizes are far more common than major-room sizes.
* After MST is made from triangulation edges, add ~15% of the unused edges to the result graph, so we have a few cycles. (point #8 of original writeup)
* Graph A
* MST with prim's algorithm

Other idea
* An alternative approach would be to distribute the rooms with much space, and then apply attractive forces to shrink the network
